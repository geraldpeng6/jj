[
  {
    "strategy_id": "RvK9lMrkgjaOxY8m2oJBV3GEb6qmX1eZ",
    "strategy_name": "单均线策略",
    "indicator": "def indicators(context):\n    \"\"\"指标\"\"\"\n    # 计算15日的均价，赋值给变量context.sma\n    context.sma = SMA(period=15)\n",
    "control_risk": "def control_risk(context):\n    \"\"\"风控\"\"\"\n    pass\n",
    "timing": "def timing(context):\n    \"\"\"择时\"\"\"\n    # 判断是否持仓，如果不持仓，则判断是否出现买入信号\n    if not context.position:\n        # 当股票收盘价上升并且交叉穿过15日均价时，出现买入信号\n        if context.data.close[-1] < context.sma[-1] and context.data.close[0] > context.sma[0]:\n            # 买入信号出现时，发送买入指令，系统自动执行买入交易\n            context.order = context.buy(price=context.data.close[0]*1.1)\n\n    # 如果持仓，则判断是否出现卖出信号\n    else:\n        # 当股票收盘价小于15日均价时，出现卖出信号\n        if context.data.close[-1] > context.sma[-1] and context.data.close[0] < context.sma[0]:\n            # 卖出信号出现时，发送卖出指令，系统自动执行卖出交易\n            context.order = context.sell(price=context.data.close[0]*0.9)\n",
    "choose_stock": "def choose_stock(context):\n    \"\"\"标的\"\"\"\n    context.symbol_list = [\"600000.XSHG\"]\n",
    "strategy_group": "library",
    "strategy_desc": [
      "股票适用",
      "期货适用"
    ]
  },
  {
    "strategy_id": "bXw27Vmpqx3enDo9b0PW5jNBaY1KLGZl",
    "strategy_name": "双均线策略",
    "indicator": "def indicators(context):\n    \"\"\"指标\"\"\"\n    # 计算15日的均价，赋值给变量context.short_sma\n    context.short_sma = SMA(period=15)\n    # 计算30日的均价，赋值给变量context.long_sma\n    context.long_sma = SMA(period=30)\n",
    "control_risk": "def control_risk(context):\n    \"\"\"风控\"\"\"\n    pass\n",
    "timing": "def timing(context):\n    \"\"\"择时\"\"\"\n    # 判断是否持仓，如果不持仓，则判断是否出现买入信号\n    if not context.position:\n        # 当15日均价上升并且交叉穿过30日均价时，出现买入信号\n        if context.short_sma[-1] < context.long_sma[-1] and context.short_sma[0] > context.long_sma[0]:\n            # 买入信号出现时，发送买入指令，系统自动执行买入交易\n            context.order = context.buy(price=context.data.close[0]*1.1)\n\n    # 如果持仓，则判断是否出现卖出信号\n    else:\n        # 当15日均价下降并且交叉穿过30日均价时，出现卖出信号\n        if context.short_sma[-1] > context.long_sma[-1] and context.short_sma[0] < context.long_sma[0]:\n            # 卖出信号出现时，发送卖出指令，系统自动执行卖出交易\n            context.order = context.sell(price=context.data.close[0]*0.9)\n",
    "choose_stock": "def choose_stock(context):\n    \"\"\"标的\"\"\"\n    context.symbol_list = [\"600158.XSHG\"]\n",
    "strategy_group": "library",
    "strategy_desc": [
      "股票适用",
      "期货适用"
    ]
  },
  {
    "strategy_id": "1dKPJgRbWyxjO3oJxAGNmLnVpqQ2a5vE",
    "strategy_name": "海龟交易策略",
    "indicator": "def indicators(context):\n    \"\"\"指标\"\"\"\n    # 设置唐奇安通道相关参数\n    # 设置唐奇安通道上轨周期\n    dc_high_period = 20\n    # 设置唐奇安通道下轨周期\n    dc_low_period = 10\n    # 获取唐奇安通道上轨\n    dc_high_line = DonchianChannel(context.data, period=dc_high_period).top(-1)\n    # 获取唐奇安通道下轨\n    dc_low_line = DonchianChannel(context.data, period=dc_low_period).bot(-1)\n\n    # 获取收盘价与唐奇安通道上轨突破信号\n    context.dc_high_signal = CrossOver(context.data.close, dc_high_line)\n    # 获取收盘价与唐奇安通道下轨突破信号\n    context.dc_low_signal = CrossOver(context.data.close, dc_low_line)\n\n    # 设置 ATR 相关参数\n    # 设置平均真实波幅周期\n    atr_period = 20\n    # 获取平均真实波幅 ATR\n    context.atr = AverageTrueRange(context.data, period=atr_period)\n\n    # 设置其他与交易相关的常量\n    # 设置加仓波幅系数\n    context.scale_ratio = 0.5\n    # 设置买入次数上限\n    context.scale_number = 4\n    # 设置止损波幅系数\n    context.stop_ratio = 2\n    # 设置账户风险比例\n    context.account_risk = 0.01\n    # 初始化累计买入次数\n    context.buy_count = 0\n    # 初始化上一次买入价格\n    context.last_buy_price = 0",
    "control_risk": "def control_risk(context):\n    \"\"\"风控\"\"\"\n    # 获取多仓数量\n    long_size = context.getposition(context.data, side='long').size\n    # 如果当前未持多仓\n    if long_size == 0:\n        # 跳出该函数\n        return\n\n    # 计算加仓价\n    scale_price = context.last_buy_price + context.scale_ratio * context.atr[0]\n    # 计算止损价\n    stop_price = context.last_buy_price - context.stop_ratio * context.atr[0]\n\n    # 如果标的收盘价向下突破唐奇安通道下轨，或收盘价小于止损价\n    if context.dc_low_signal[0] == -1.0 or context.data.close[0] < stop_price:\n        # 发送平仓指令\n        context.close(data=context.data, side='long')\n        # 更新买入次数\n        context.buy_count = 0\n        \n    # 如果标的收盘价大于加仓价，并且累计加仓次数小于加仓次数上限时\n    elif context.data.close[0] > scale_price and context.buy_count < context.scale_number:\n        # 计算加仓数量\n        size = context.broker.cash * context.account_risk / context.atr[0] // 10 * 10\n        # 发送加仓指令\n        context.buy(data=context.data, size=size, side='long')\n        # 更新累计买入次数\n        context.buy_count += 1\n        # 以当前收盘价作为买入价格\n        context.last_buy_price = context.data.close[0]\n",
    "timing": "def timing(context):\n    \"\"\"择时\"\"\"\n    # 标的收盘价向上突破唐奇安通道上轨，且当前未持仓时，出现入市信号\n    if context.dc_high_signal[0] == 1.0 and context.buy_count == 0:\n        # 计算买入数量\n        size = context.broker.cash * context.account_risk / context.atr[0] // 10 * 10\n        # 发送买入指令\n        context.buy(data=context.data, size=size, signal='open')\n        # 更新买入次数\n        context.buy_count = 1\n        # 以当前收盘价作为买入价格\n        context.last_buy_price = context.data.close[0]",
    "choose_stock": "def choose_stock(context):\n    \"\"\"标的\"\"\"\n    context.symbol_list = [\"FU2205.XSGE\"]",
    "strategy_group": "library",
    "strategy_desc": [
      "股票适用",
      "期货适用"
    ]
  },
  {
    "strategy_id": "Bk4bMeJnL7Em6D0ZR0Y1PdlxaK2jpRNW",
    "strategy_name": "多因子策略",
    "indicator": "def indicators(context):\n    \"\"\"指标\"\"\"\n    # 移动平均时间窗口\n    context.period = 15\n    # 设置用于购买股票的资金比例\n    context.max_value_percent = 0.9  \n    # 设置需要考虑收益率的时间窗口\n    context.look_back_days = 50  \n    # 设置截面收益率的阈值\n    context.threshold = 0.2\n\n    # 创建一个空字典\n    context.sma = dict()\n    context.rate = dict()\n    for data in context.datas:\n        # 计算所有股票的15日的移动平均价，存储到字典context.sma中\n        context.sma[data._name] = SMA(data.close, period=context.period)\n        # 计算所有股票的截面收益率，存储到字典context.rate中\n        context.rate[data._name] = PctChange(data.close, period=50)",
    "control_risk": "def control_risk(context):\n    \"\"\"风控\"\"\"\n    # 遍历所有股票\n    for data in context.datas:\n        # 获取每只股票的仓位\n        position = context.getposition(data).size\n        # 如果该股票已持仓，但不在股票池中，或当前交易日收盘价小于其15日均价,出现卖出信号\n        if position != 0 and data._name not in context.stock_pool or context.sma[data._name][0] > data.close[0]:\n            # 平仓\n            context.close(data=data,price=data.close[0]*0.9)",
    "timing": "def timing(context):\n    \"\"\"择时\"\"\"\n    # 提取当前的账户价值\n    total_value = context.broker.getvalue()\n\n    if context.pool_size != 0:\n        # 计算用于购买标的池中不同标的的金额\n\n        # 构建一个fibonacci数列\n        def fibonacci(n):\n            if n < 3:\n                return 1\n            return fibonacci(n - 1) + fibonacci(n - 2)\n\n        fibo = []\n        for i in range(context.pool_size + 1):\n            if i > 0:\n                fibo.append(fibonacci(i))\n\n        fibo = sorted(fibo, reverse=True)\n        \n        buy_list = []\n        # 遍历所有标的\n        for data in context.datas:\n            # 获取每只股票的仓位\n            position = context.getposition(data).size\n            # 如果该股票在股票池中，且未持仓，且当前交易日收盘价大于其20日均价,出现买入信号\n            if not position and data._name in context.stock_pool and data.close[0] > context.sma[data._name][0]:\n                # 统计每次符合买入条件的标的\n                buy_list.append(data._name)\n\n                # 计算用于购买该标的的金额\n                rate = fibo[context.stock_pool.index(data._name)] / sum(fibo)\n                per_value = rate * total_value * context.max_value_percent\n\n                # 计算该标的的买入数量\n                size = int(per_value / 100 / data.close[0]) * 100\n                # 发送买入指令\n                context.buy(data=data, size=size,price=data.close[0]*1.1)",
    "choose_stock": "def choose_stock(context):\n    \"\"\"标的\"\"\"\n    # 输入基准标的\n    context.benchmark = \"600048.XSHG\"\n    # 股票组合的代码赋值给context.symbol_list \n    context.symbol_list = [\"600048.XSHG\", \"601010.XSHG\", \"600663.XSHG\",\"600007.XSHG\", \"600185.XSHG\"]\n\n    # 创建一个空列表\n    rate_list = []\n    # 遍历所有股票\n    for data in context.datas:\n        # 获取每只股票的截面收益率，存储到列表rate_list中\n        rate = context.rate[data._name][0]\n        if rate > context.threshold:\n            rate_list.append([data._name, rate])\n\n    # 按照收益率进行降序排序，并获取指定数量的股票池\n    sorted_rate = sorted(rate_list, key=lambda x: x[1], reverse=True)\n    context.stock_pool = [i[0] for i in sorted_rate]\n    context.pool_size = len(context.stock_pool)",
    "strategy_group": "library",
    "strategy_desc": [
      "股票适用"
    ]
  },
  {
    "strategy_id": "kLElZMDVnY3JvX87BAmd4yqQW9rxa67g",
    "strategy_name": "移动平均成本法定投策略",
    "indicator": "def indicators(context):\n    \"\"\"指标\"\"\"\n    # 定投日期, 每月20号定投\n    context.buy_day = 20\n    # 定投金额, 每次定投10000元\n    context.buy_money = 10000  \n    # 偏离上界限\n    context.up_bound = 1.2\n    # 偏离下界限\n    context.down_bound = 0.8\n    # 向上突破上界限时的定投倍数  \n    context.up_multiple = 0.5\n    # 向下突破下界限时的定投倍数  \n    context.down_multiple = 2.5",
    "control_risk": "def control_risk(context):\n      \"\"\"风控\"\"\"\n      pass",
    "timing": "def timing(context):\n    \"\"\"择时\"\"\"\n    # 获取当前交易日的日期\n    current_date = context.data.datetime.date(0)\n    # 获取上一个交易日的日期\n    previous_date = context.data.datetime.date(-1)\n    # 判断当前交易日是否是定投日期\n    if context.buy_day == int(str(current_date)[-2:]) or int(str(previous_date)[-2:]) < context.buy_day < int(str(current_date)[-2:]):\n        # 获取标的的仓位\n        position = context.getposition(context.data).size\n        \n        # 判断是否持仓\n        if position > 0:\n            # 如果持仓，获取平均持有成本\n            per_value = context.getposition(context.data).price\n        else:\n            # 如果未持仓，记标的的收盘价为平均持有成本\n            per_value = context.data.close\n        # 获取定投的费率\n        taker = context.get_taker(context.buy_money)\n        # 基于定投金额和费率计算申购份额\n        size = context.buy_money / (context.data.close * (1 + taker))\n        \n        # 计算当前标的价格与平均持有成本的比值\n        ratio = context.data.close[-1] / per_value\n        \n        # 判断是否偏离下界限\n        if ratio < context.down_bound:\n            # 当当前价格低于平均持有成本时，则多买\n            size = size * context.down_multiple\n            \n        # 判断是否偏离上界限\n        if ratio >= context.up_bound:\n            # 当当前价格高于平均持有成本时，则少买\n            size = size * context.up_multiple\n            \n\t\t# 发送申购指令\n        context.order = context.buy(data=context.data, size=size, price=context.data.close[0]*1.1)",
    "choose_stock": "def choose_stock(context):\n    \"\"\"标的\"\"\"\n    context.symbol_list = [\"513500.XSHG\"]",
    "strategy_group": "library",
    "strategy_desc": [
      "基金适用"
    ]
  },
  {
    "strategy_id": "Ew9DBX7a6mNjlr0LP0JGVynbQqOM25dR",
    "strategy_name": "均线偏离法定投策略",
    "indicator": "def indicators(context):\n    \"\"\"指标\"\"\"\n    # 定投日期\n    context.buy_day = 9\n    # 定投金额\n    context.buy_money = 5000\n    # 指数的均线时间窗口\n    context.period = 100  \n    # 偏离上界限\n    context.up_bound = 1.1\n    # 偏离下界限\n    context.down_bound = 0.9 \n    # 向上突破上界限时的定投倍数 \n    context.up_multiple = 0.5 \n    # 向下突破下界限时的定投倍数 \n    context.down_multiple = 1.5  \n    # 计算指数的均价\n    for data in context.datas:\n        if data._name == context.benchmark:\n            context.sma = MovingAverageSimple(data.close, period=context.period)",
    "control_risk": "def control_risk(context):\n    \"\"\"风控\"\"\"\n    pass",
    "timing": "def timing(context):\n    \"\"\"择时\"\"\"\n    # 获取当前交易日的日期\n    current_date = context.datas[0].datetime.date(0)\n    # 获取上一个交易日的日期\n    previous_date = context.datas[0].datetime.date(-1)\n    # 判断当前交易日是否是定投日期\n    if context.buy_day == int(str(current_date)[-2:]) or int(str(previous_date)[-2:]) < context.buy_day < int(str(current_date)[-2:]):\n        # 遍历所有标的\n        for data in context.datas:\n            # 筛选目标标的\n            if data._name != context.benchmark:\n                # 计算基金净值与指标均价的比值\n                ratio = data.close[-1] / context.sma\n                \n                # 获取定投的费率\n                taker = context.get_taker(context.buy_money)\n                # 基于定投金额和费率计算申购份额\n                size = context.buy_money / (data.close[0] * (1 + taker))\n\n                # 判断是否偏离下界限\n                if ratio < context.down_bound:\n                    # 当当前价格低于平均持有成本时，则多买\n                    size = size * context.down_multiple\n                    \n                # 判断是否偏离上界限\n                if ratio >= context.up_bound:\n                    # 当当前价格高于平均持有成本时，则少买\n                    size = size * context.up_multiple\n\n\t\t        # 发送申购指令\n                context.order = context.buy(data=data, size=size,price=data.close[0]*1.1)",
    "choose_stock": "def choose_stock(context):\n    \"\"\"标的\"\"\"\n    # 输入基准标的\n    context.benchmark = \"000001.XSHG\"  \n    # 输入组合标的\n    context.symbol_list = [\"000001.XSHG\", \"510300.XSHG\"]",
    "strategy_group": "library",
    "strategy_desc": [
      "基金适用"
    ]
  },
  {
    "strategy_id": "1YzLpkbN5qGKaJ0gNogVQlZew34WRj7v",
    "strategy_name": "目标止盈法定投策略",
    "indicator": "def indicators(context):\n    context.buy_day = 9  # 定投日期\n    context.buy_money = 2000  # 定投金额\n    context.target_profit = 0.4  # 止盈盈利目标\n    context.min_term = 12  # 最小持有期数\n\n    context.term_buy = 0  # 记录投资期数\n    context.finish = False  # 是否达到止盈\n",
    "control_risk": "def control_risk(context):\n    \"\"\"风控\"\"\"\n    pass\n",
    "timing": "def timing(context):\n    \"\"\"择时\"\"\"\n    current_date = context.datas[0].datetime.date(0)\n    pre_date = context.datas[0].datetime.date(-1)\n\n    # 计算当前收益率，达到止盈条件则全部赎回\n    if context.position:\n        profit_percent = context.datas[0].close[0] / context.position.price - 1\n        if profit_percent >= context.target_profit and context.term_buy >= context.min_term:\n            context.order = context.order_target_value(value=0)\n            context.finish = True\n\n    # 定投\n    if context.buy_day == int(str(current_date)[-2:]) or \\\n            int(str(pre_date)[-2:]) < context.buy_day < int(str(current_date)[-2:]):\n\n        if not context.finish:\n            price = context.datas[0].close[0]\n            taker = context.get_taker(context.buy_money)\n            size = context.buy_money / (price * (1 + taker))\n\n            context.order = context.buy(size=size,price=context.data.close[0]*1.1)\n            context.term_buy += 1\n",
    "choose_stock": "def choose_stock(context):\n    \"\"\"标的\"\"\"\n    context.symbol_list = [\"502048.XSHG\"]\n",
    "strategy_group": "library",
    "strategy_desc": [
      "基金适用"
    ]
  },
  {
    "strategy_id": "jyqPOGLv5z4YN784GAQ6ZlJpnWgKXx9d",
    "strategy_name": "目标市值法定投策略",
    "indicator": "def indicators(context):\n    \"\"\"指标\"\"\"\n    # 定投日期\n    context.buy_day = 9  \n    # 定投金额\n    context.buy_money = 5000  \n    # 目标市值\n    context.target_value = 50000",
    "control_risk": "def control_risk(context):\n    \"\"\"风控\"\"\"\n    pass",
    "timing": "def timing(context):\n    \"\"\"择时\"\"\"\n    # 获取当前交易日的日期\n    current_date = context.data.datetime.date(0)\n    # 获取上一个交易日的日期\n    previous_date = context.data.datetime.date(-1)\n    # 判断当前交易日是否是定投日期\n    if context.buy_day == int(str(current_date)[-2:]) or int(str(previous_date)[-2:]) < context.buy_day < int(str(current_date)[-2:]):\n\n        # 获取当前市值\n        current_value = context.position.size * context.datas[0].close[0]\n        # 计算买入金额\n        diff_value = context.target_value - current_value\n\n        # 如果买入金额为0，表示当前市值已经等于目标市值，则不定投\n        if diff_value == 0:\n            return\n\n        # 如果买入金额大于0，表示当前市值没有达到目标市值，则追加定投\n        elif diff_value > 0:\n            # 确定买入金额\n            buy_money = min(context.buy_money, diff_value)\n            # 获取定投的费率\n            taker = context.get_taker(buy_money)\n            # 基于定投金额和费率计算申购份额\n            size = buy_money / (context.datas[0].close[0] * (1 + taker))\n\t\t    # 发送申购指令\n            context.order = context.buy(data=context.data, size=size,price=context.data.close[0]*1.1)\n\n        # 如果买入金额小于0，表示当前市值超出目标市值，则卖出超出部分\n        else:\n            context.order = context.order_target_value(target=context.target_value,price=context.data.close[0]*0.9)",
    "choose_stock": "def choose_stock(context):\n    \"\"\"标的\"\"\"\n    context.symbol_list = [\"502048.XSHG\"]",
    "strategy_group": "library",
    "strategy_desc": [
      "基金适用"
    ]
  },
  {
    "strategy_id": "LVpRPwBvOeGZWQ8WO8E34mXMrjxzyn7d",
    "strategy_name": "跨品种套利策略",
    "indicator": "def indicators(context):\n    \"\"\"指标\"\"\"\n    # 设置布林带时间窗口\n    period = 20\n    # 设置开仓阈值\n    open_devfactor = 1.5\n    # 设置止损阈值\n    stop_devfactor = 2\n\n    # 遍历所有标的\n    for data in context.datas:\n        # 如果标的为螺纹钢\n        if data._name == \"RB2201.XSGE\":\n            # 记录标的对象\n            context.rb_data = data\n        # 如果标的为焦炭\n        elif data._name == \"J2201.XDCE\":\n            # 记录标的对象\n            context.j_data = data\n\n    # 获取两个标的的价差序列\n    context.diff_close = context.rb_data.close - context.j_data.close\n    # 计算套利区间上下限\n    open_boll_band = BollingerBands(context.diff_close,\n                                            period=period,\n                                            devfactor=open_devfactor)\n\n    # 获取套利区间的上轨、下轨、中轨\n    open_top = open_boll_band.top\n    open_bot = open_boll_band.bot\n    context.open_mid = open_boll_band.mid\n\n    # 获取价差分别突破上轨、下轨的信号\n    context.cross_top_signal = CrossOver(context.diff_close, open_top)\n    context.cross_bot_signal = CrossOver(context.diff_close, open_bot)\n\n    # 计算止损区间上下限\n    stop_boll_band = BollingerBands(context.diff_close,\n                                            period=period,\n                                            devfactor=stop_devfactor)\n    # 获取止损区间的上下轨\n    context.stop_top = stop_boll_band.top\n    context.stop_bot = stop_boll_band.bot",
    "control_risk": "def control_risk(context):\n    \"\"\"风控\"\"\"\n    # 获取焦炭多仓数量\n    long_size = context.getposition(context.j_data, side='long').size\n    # 获取焦炭空仓数量\n    short_size = context.getposition(context.j_data, side='short').size\n\n    # 如果对焦炭持多仓并且价差大于上轨\n    if long_size > 0 and context.diff_close[0] > context.stop_top[0]:\n        # 对两个合约进行平仓\n        context.close(data=context.j_data, side='long')\n        context.close(data=context.rb_data, side='short')\n\n    # 如果对焦炭持空仓并且价差小于下轨\n    elif short_size < 0 and context.diff_close[0] < context.stop_bot[0]:\n        # 对两个合约进行平仓\n        context.close(data=context.j_data, side='short')\n        context.close(data=context.rb_data, side='long')",
    "timing": "def timing(context):\n    \"\"\"择时\"\"\"\n    # 获取焦炭多仓数量\n    long_size = context.getposition(context.j_data, side='long').size\n    # 获取焦炭空仓数量\n    short_size = context.getposition(context.j_data, side='short').size\n\n    # 如果未持有空仓和多仓\n    if long_size == 0 and short_size == 0:\n\n        # 当价差上穿上轨\n        if context.cross_top_signal[0] == 1.0:\n            # 做空螺纹钢\n            context.sell(data=context.rb_data, signal='open')\n            # 做多焦炭\n            context.buy(data=context.j_data, signal='open')\n\n        # 当价差下穿下轨\n        elif context.cross_bot_signal[0] == -1.0:\n            # 做多螺纹钢\n            context.buy(data=context.rb_data, signal='open')\n            # 做空焦炭\n            context.sell(data=context.j_data, signal='open')\n\n    # 如果对焦炭持多仓并且价差小于等于中轨\n    elif long_size > 0 and context.diff_close[0] <= context.open_mid[0]:\n        # 对两个合约进行平仓\n        context.close(data=context.j_data, side='long')\n        context.close(data=context.rb_data, side='short')\n\n    # 如果对焦炭持空仓并且价差大于等于中轨\n    elif short_size < 0 and context.diff_close[0] >= context.open_mid[0]:\n        # 对两个合约进行平仓\n        context.close(data=context.j_data, side='short')\n        context.close(data=context.rb_data, side='long')",
    "choose_stock": "def choose_stock(context):\n    \"\"\"标的\"\"\"\n    # 设置基准标的\n    context.benchmark = \"RB2201.XSGE\"\n    # 设置标的\n    context.symbol_list = [\"RB2201.XSGE\", \"J2201.XDCE\"]",
    "strategy_group": "library",
    "strategy_desc": [
      "期货适用"
    ]
  },
  {
    "strategy_id": "RnOL6bxqG5lKpVArZADgJ1MazmXrWB9v",
    "strategy_name": "MACD策略",
    "indicator": "def indicators(context):\n    \"\"\"指标\"\"\"\n    # 计算MACD指标\n    # 快速EMA周期 period_me1\n    # 慢速EMA周期 period_me2\n    # DIFF平滑周期 period_signal\n    macd = MACD(period_me1=12, period_me2=26, period_signal=9)\n    # 计算DIF值\n    context.dif = macd.macd\n    # 计算MACD值\n    context.macd = macd.signal\n    # 计算Histo值\n    context.histo = context.dif - context.macd\n",
    "control_risk": "def control_risk(context):\n    \"\"\"风控\"\"\"\n    pass\n",
    "timing": "def timing(context):\n    \"\"\"择时\"\"\"\n    # 判断是否持仓，如果不持仓，则判断是否出现买入信号\n    if not context.position:\n        # 当DIF和MACD均大于0，并且DIF向上突破MACD时，出现买入信号\n        if context.dif > 0 and context.macd > 0 and context.histo[0] > 0 and context.histo[-1] < 0:\n            # 买入信号出现时，发送买入指令，系统自动执行买入交易\n            context.order = context.buy(price=context.data.close[0]*1.1)\n\n    # 如果持仓，则判断是否出现卖出信号\n    else:\n        # 当DIF和MACD均小于等于0，并且DIF向下突破MACD时，出现卖出信号\n        if context.dif < 0 and context.macd < 0 and context.histo[0] < 0 and context.histo[-1] > 0:\n            # 卖出信号出现时，发送卖出指令，系统自动执行卖出交易\n            context.order = context.sell(price=context.data.close[0]*0.9)\n",
    "choose_stock": "def choose_stock(context):\n    \"\"\"标的\"\"\"\n    context.symbol_list = [\"600360.XSHG\"]\n",
    "strategy_group": "library",
    "strategy_desc": [
      "股票适用",
      "期货适用"
    ]
  },
  {
    "strategy_id": "9mdpEgqwNaBJ25oOMAQe7lR6xbKr3GPV",
    "strategy_name": "MACD+KDJ策略",
    "indicator": "def indicators(context):\n    \"\"\"指标\"\"\"\n    \n    # 计算MACD指标\n    # 快速EMA周期 period_me1\n    # 慢速EMA周期 period_me2\n    # DIFF平滑周期 period_signal\n    macd = MACD(period_me1=12, period_me2=26, period_signal=9)\n    # 计算DIF值\n    context.dif = macd.macd\n    # 计算MACD值\n    context.macd = macd.signal\n    # 计算Histo值\n    context.histo = context.dif - context.macd\n\n    # 计算KDJ指标\n    kdj = KDJ(context.data,\n              period=14,\n              period_dfast=3,\n              period_dslow=3,\n              safediv=False,\n              safezero=0.0,\n              movav=SMA)\n\n    context.J = kdj.percJ\n    context.percK = kdj.percK\n    context.D = kdj.percD\n\n",
    "control_risk": "def control_risk(context):\n    \"\"\"风控\"\"\"\n    pass\n",
    "timing": "def timing(context):\n    \"\"\"择时\"\"\"\n    # 判断是否持仓，如果不持仓，则判断是否出现买入信号\n    if not context.position:\n        # 当DIF和MACD均大于0，并且DIF向上突破MACD时，出现买入信号\n        if context.dif > 0 and context.macd > 0 and context.histo[0] > 0 and context.histo[-1] < 0:\n            # 买入信号出现时，发送买入指令，系统自动执行买入交易\n            context.order = context.buy(price=context.data.close[0]*1.1)\n\n    # 如果持仓，则判断是否出现卖出信号\n    else:\n   \t# 当J向下突破D时，出现卖出信号\n    \tif context.J[-1] > context.D[-1] and context.J[0] < context.D[0]:\n\t    # 卖出信号出现时，发送卖出指令，系统自动执行卖出交易\n            context.order = context.sell(price=context.data.close[0]*0.9)\n",
    "choose_stock": "def choose_stock(context):\n    \"\"\"标的\"\"\"\n    context.symbol_list = [\"600360.XSHG\"]\n",
    "strategy_group": "library",
    "strategy_desc": [
      "股票适用",
      "期货适用"
    ]
  },
  {
    "strategy_id": "5dZbPzBk7VORjvARLogQ46rKNwaEGMJX",
    "strategy_name": "关卡1-均线突破策略示例",
    "indicator": "def indicators(context):\n    \"\"\"指标\"\"\"\n    # 计算15日平均线\n    context.sma = SMA(context.data.close, period=15)\n    # 设置止盈比例为0.1\n    context.p_takeprofit = 0.1",
    "control_risk": "def control_risk(context):\n    \"\"\"风控\"\"\"\n    # 如果持仓\n    if context.position.size != 0:\n        # 计算止盈价\n        limit_price = (1 + context.p_takeprofit) * context.position.price\n\n        # 如果当前收盘价大于止盈价\n        if context.data.close[0] > limit_price:\n            # 执行平仓\n            context.close(data=context.data,price=context.data.close[0]*0.9)",
    "timing": "def timing(context):\n    \"\"\"择时\"\"\"\n    # 如果未持仓\n    if context.position.size == 0:\n        # 如果当天收盘价在15日均线之上\n        if context.data.close[-1] < context.sma[-1] and context.data.close[0] > context.sma[0]:\n\n            # 执行买入\n            context.buy(data=context.data,price=context.data.close[0]*1.1)\n\n    # 如果当天收盘价在15日均线之下\n    elif context.data.close[-1] > context.sma[-1] and context.data.close[0] < context.sma[0]:\n\n        # 执行平仓\n        context.close(data=context.data,price=context.data.close[0]*0.9)",
    "choose_stock": "def choose_stock(context):\n    \"\"\"标的\"\"\"\n    # 设置标的为中国石油\n    context.symbol_list = ['601857.XSHG']",
    "strategy_group": "library",
    "strategy_desc": [
      "股票适用"
    ]
  },
  {
    "strategy_id": "YWRakGqPDlvKjx0D1A9LN41QyVwOp6r7",
    "strategy_name": "关卡2-一阳穿三线示例",
    "indicator": "def indicators(context):\n    \"\"\"指标\"\"\"\n    # 设置短期均线周期为 5 日\n    context.short_period = 5\n    # 设置中期均线周期为 10 日\n    context.medium_period = 10\n    # 设置长期均线周期为 30 日\n    context.long_period = 30\n    # 设置放量周期为 15 日\n    context.volume_period = 15\n    # 设定止盈、止损涨跌幅为 5%\n    context.down_tr = 0.05\n\n    # 创建空字典\n    context.stock_sma = {}\n\n    for data in context.datas:\n        context.stock_sma[data._name] = {\n            'short_sma': SMA(data.close, period=context.short_period), # 计算短期均价\n            'medium_sma' : SMA(data.close, period=context.medium_period), # 计算中期均价\n            'long_sma' : SMA(data.close, period=context.long_period), # 计算长期均价\n            'volume_sma' : SMA(data.volume, period=context.volume_period) # 计算成交量均值\n        }\n",
    "control_risk": "def control_risk(context):\n    \"\"\"风控\"\"\"\n    # 当持有股涨跌幅大于 5%，就全部卖出\n    for data in context.datas:\n        position = context.getposition(data).size\n        if position!= 0 and abs((data.close[0] - data.close[-1])/data.close[-1]) >= context.down_tr:\n            context.close(data=data,price=data.close[0]*0.9)",
    "timing": "def timing(context):\n    \"\"\"择时\"\"\"\n    # 立即买入\n    for name in context.buy_list:\n        data = context.getdatabyname(name)\n        context.buy(data=data,price=data.close[0]*1.1)\n            ",
    "choose_stock": "def choose_stock(context):\n    \"\"\"标的\"\"\"\n    # 设置标的及基准\n    context.benchmark = \"000300.XSHG\"\n    context.symbol_list = [\"000300.XSHG\"]\n    context.parse_index = True\n\n    # 确定标的池\n    context.buy_list = []\n    for data in context.datas:\n        short_sma = context.stock_sma[data._name]['short_sma']\n        medium_sma = context.stock_sma[data._name]['medium_sma']\n        long_sma = context.stock_sma[data._name]['long_sma']\n        volume_sma = context.stock_sma[data._name]['volume_sma']\n\n        # 判断是否符合一阳穿三线条件\n        if data.open[0] < data.close[0] and \\\n                data.volume[0] > 2 * volume_sma[-1] and \\\n                data.low[0] < short_sma[0] and \\\n                data.low[0] < medium_sma[0] and \\\n                data.low[0] < long_sma[0] and \\\n                data.close[0] > short_sma[0] and \\\n                data.close[0] > medium_sma[0] and \\\n                data.close[0] > long_sma[0]:\n            context.buy_list.append(data._name)",
    "strategy_group": "library",
    "strategy_desc": [
      "股票适用"
    ]
  },
  {
    "strategy_id": "E6yMYPqWlQDNB4oNxAwb1e3ZLm7VrxkJ",
    "strategy_name": "关卡3-指标选取示例",
    "indicator": "def indicators(context):\n    \"\"\"指标\"\"\"\n    # 设置历史成交量均值的计算周期\n    context.volume_days = 120\n    # 设置目标当日涨幅\n    context.target_increase = 0.02\n    # 设置止损比例\n    context.loss_ratio = 0.05\n\n    # 创建MACD指标字典\n    context.stock_info = {}\n\n    # 遍历所有标的\n    for data in context.datas:\n\n        # MACD类的实例化，快的EMA周期为12，慢的EMA周期为26，差离值计算周期为9\n        macd_instance = MACD(data.close, period_me1=12, period_me2=26, period_signal=9)\n\n        # 将对应的值写入到MACD指标字典中\n        context.stock_info[data._name] = {\n            'DIF值': macd_instance.macd,\n            'DEA值': macd_instance.signal,\n            'MACD值':macd_instance.macd-macd_instance.signal,\n        }\n",
    "control_risk": "def control_risk(context):\n    \"\"\"风控\"\"\"\n    # 遍历初始标的中的所有标的\n    for data in context.datas:\n        # 获取标的持仓信息\n        position = context.getposition(data)\n\n        # 如果当前已持仓\n        if position.size != 0:\n            # 计算止损价格\n            stop_price = (1 - context.loss_ratio) * position.price\n\n            # 如果当日收盘价低于止损价格\n            if data.close[0] < stop_price:\n                # 执行平仓\n                context.close(data=data,price=data.close[0]*0.9)   ",
    "timing": "def timing(context):\n    \"\"\"择时\"\"\"\n    # 遍历初始标的池中的所有标的\n    for data in context.datas:\n\n        # 获取MACD指标数据和持仓信息\n        macd_info = context.stock_info[data._name]\n        position = context.getposition(data)\n\n        # 如果标的在合格标的池中且当前未持仓\n        if data._name in context.stock_list and position.size == 0:\n\n            # 如果DIF值和DEA值均大于0，并且MACD值由负变正\n            if macd_info['DIF值'][0] > 0 and macd_info['DEA值'][0] > 0 and macd_info['MACD值'][-1] < 0 and macd_info['MACD值'][0] > 0:\n                # 发送买入指令，系统自动执行买入交易\n                context.buy(data=data,price=data.close[0]*1.1)\n\n        # 如果当前已持仓        \n        elif position.size != 0:\n            # 如果DIF值和DEA值均小于0，并且MACD值由正变负\n            if macd_info['DIF值'][0] < 0 and macd_info['DEA值'][0] < 0 and macd_info['MACD值'][-1] > 0 and macd_info['MACD值'][0] < 0 :\n                # 执行平仓\n                context.close(data=data,price=data.close[0]*0.9)",
    "choose_stock": "def choose_stock(context):\n    \"\"\"标的\"\"\"\n    # 设置基准标的：上证50\n    context.benchmark = '000300.XSHG'\n    # 设置组合标的，上证50里面的所有成分股\n    context.symbol_list = [\"000300.XSHG\"]\n    # 设置解析成分股\n    context.parse_index = True\n\n    # 创建列表，用来储存合格标的\n    context.stock_list = []\n\n    # 遍历初始标的池中的所有标的\n    for data in context.datas:\n        \n        # 如果当前标的历史交易天数小于计算周期\n        if len(data.volume) < context.volume_days:\n            # 跳过本次循环\n            continue\n\n        # 创建成交量累加变量\n        count_volume = 0            \n        # 计算总成交量，将指定时间内的每日成交量累加求和\n        for i in range(context.volume_days):\n            count_volume += data.volume[-i]\n        # 计算历史成交量均值\n        volume_avg = count_volume/context.volume_days\n        \n        # 计算当日涨幅\n        daily_increase = (data.close[0]-data.close[-1])/data.close[-1]\n\n        # 判断当日涨幅是否超过目标当日涨幅，并且当日成交量超过历史成交量均值\n        if daily_increase > context.target_increase and data.volume[0]>volume_avg:\n            # 将通过判断的标的添加到合格标的池\n            context.stock_list.append(data._name)",
    "strategy_group": "library",
    "strategy_desc": [
      "股票适用"
    ]
  },
  {
    "strategy_id": "lbgKWjdQGe4vXV8X60YLD9pR6m1ON5yk",
    "strategy_name": "关卡4-筛选总市值选股示例",
    "indicator": "def indicators(context):\n    \"\"\"指标初始化\"\"\"\n    # 设置最小总市值\n    context.min_market_cap = 15000",
    "control_risk": "def control_risk(context):\n    \"\"\"风控\"\"\"\n    pass",
    "timing": "def timing(context):\n    \"\"\"择时\"\"\"\n    pass",
    "choose_stock": "def choose_stock(context):\n    \"\"\"标的\"\"\"\n    # 输入基准标的\n    context.benchmark = \"000016.XSHG\"\n    # 输入组合标的\n    context.symbol_list = ['000016.XSHG']\n    context.parse_index = True\n    \n    # 获取当前以及前一天的日期\n    context.current_date = context.data.datetime.date()\n    context.previous_date = context.data.datetime.date(-1)\n    # 判断当前交易日是否是每个季度的第一个交易日，判断标的池的更新次数，若满足其中一个条件，更新标的池\n    if context.current_date.month in [1, 4, 7, 10] and context.previous_date.month not in [1, 4, 7, 10]:\n        # 获取估值指标数据\n        indicator_data = context.get_fundamentals(context.current_date, type=\"valuation\")\n        # 筛选出总市值大于最小总市值的数据\n        filted_data = indicator_data[indicator_data['market_cap'] > context.min_market_cap]\n        \n        # 查看筛选后的标的代码\n        context.log('筛选后的标的为：\\n{}'.format(filted_data['symbol_exchange']))",
    "strategy_group": "library",
    "strategy_desc": [
      "股票适用"
    ]
  },
  {
    "strategy_id": "JNMK5br6azDm97AjBAgwE4X13nGZVOyq",
    "strategy_name": "关卡5-筛选中长期上涨股票示例",
    "indicator": "def indicators(context):\n    \"\"\"指标\"\"\"\n    # 设置最小营业收入同比增长率\n    context.min_income_raise = 10\n    # 设置最小净利润同比增长率\n    context.min_margin = 22\n    # 设置最小销售净利率\n    context.min_sales_margin = 2\n    # 设置最小销售毛利率\n    context.min_gross_margin = 9\n    # 设置最小净资产收益率\n    context.min_roe = 5\n    # 设置账户最大使用资金\n    context.max_percent = 0.9\n\n    # 初始化上一次标的名称列表\n    context.last_stock_pool = []\n    # 初始化当前标的名称列表\n    context.stock_pool = []\n ",
    "control_risk": "def control_risk(context):\n    \"\"\"风控\"\"\"\n    pass",
    "timing": "def timing(context):\n    \"\"\"择时\"\"\"\n    # 如果当前交易日为每个季度的第一个交易日\n    if context.current_date.month in [1, 4, 7, 10] and context.previous_date.month not in [1, 4, 7, 10]: \n        \n        # 创建买入列表\n        buy_list = []\n        # 遍历上一次标的池数据\n        for name in context.last_stock_pool:\n            # 根据标的名称，获取标的数据\n            data = context.getdatabyname(name)\n\n            # 遍历当前标的池中的标的名称\n            if name in context.stock_pool:\n                \n                # 计算单个标的能使用的资金\n                stock_value = context.broker.getvalue() * context.max_percent/len(context.stock_pool)\n                # 计算单个标的所需购买的数量\n                size = stock_value / data.close[0] // 100*100\n                # 获取标的成交数据\n                position = context.getposition(data)\n\n                # 如果需购买的数量小于当前持仓数量\n                if size < position.size:\n                    # 执行卖出，减少持仓数量\n                    context.sell(data=data, size=position.size - size,price=data.close[0]*0.9)\n                # 如果需购买的数量大于当前持仓数量\n                elif size > position.size:\n                    # 将标的和购买数量添加到购买列表中\n                    buy_list.append((data, size - position.size))\n\n            # 其他情况\n            else:\n                # 执行平仓\n                context.close(data=data,price=data.close[0]*0.9)\n   \n        # 遍历买入列表\n        for data, size in buy_list:\n            # 执行买入\n            context.buy(data=data, size=size,price=data.close[0]*1.1)\n\n    # 遍历当前标的池\n    for name in context.stock_pool:\n        # 根据标的名称，获取标的数据\n        data = context.getdatabyname(name)\n\n        # 如果该标的当前没有持仓\n        if not context.getposition(data):\n            # 计算单个标的能使用的资金\n            stock_value = context.broker.getvalue() * context.max_percent/len(context.stock_pool)\n            # 计算购买数量\n            size = stock_value / data.close[0] // 100*100\n            # 执行购买\n            context.buy(data=data, size=size,price=data.close[0]*1.1)",
    "choose_stock": "def choose_stock(context):\n    \"\"\"标的\"\"\"\n    # 设置基准标的\n    context.benchmark = \"000016.XSHG\"\n    # 设置标的池\n    context.symbol_list = [\"000016.XSHG\"]\n    # 设置解析成分股\n    context.parse_index = True\n\n    # 获取当前的日期\n    context.current_date = context.data.datetime.date()    \n    # 获取昨天的日期\n    context.previous_date = context.data.datetime.date(-1)\n\n\n    # 如果当前交易日为每个季度的第一个交易日\n    if context.current_date.month in [1, 4, 7, 10] and context.previous_date.month not in [1, 4, 7, 10]:\n        # 保存上一次筛选后的标的名称列表\n        context.last_stock_pool = context.stock_pool\n\n        # 获取财务指标数据\n        indicator_data = context.get_fundamentals(pub_date=context.current_date, type='indicator')\n\n        # 筛选出营业收入同比增长率大于最小营业收入同比增长率的数据\n        filted_data = indicator_data[indicator_data['inc_revenue_year_on_year']>context.min_income_raise]\n        # 进一步筛选出净利润同比增长率大于最小净利润同比增长率的数据\n        filted_data = filted_data[filted_data['inc_net_profit_year_on_year']>context.min_margin]\n        # 进一步筛选出销售净利率大于最小销售净利率的数据\n        filted_data = filted_data[filted_data['net_profit_margin']>context.min_sales_margin]\n        # 进一步筛选出销售毛利率大于最小销售毛利率的数据\n        filted_data = filted_data[filted_data['gross_profit_margin']>context.min_gross_margin]\n        # 进一步筛选出净资产收益率大于最小净资产收益率的数据\n        filted_data = filted_data[filted_data['roe']>context.min_roe]\n\n        # 查看筛选后的标的代码\n        context.log('筛选后的标的为：\\n{}'.format(filted_data['symbol_exchange']))\n        # 将标的代码保存到标的池中\n        context.stock_pool = filted_data['symbol_exchange'].to_list()",
    "strategy_group": "library",
    "strategy_desc": [
      "股票适用"
    ]
  },
  {
    "strategy_id": "payN3jJvkP5z7q8BkoZGE9rdYO6BmVbR",
    "strategy_name": "关卡6-CCI指标择时示例",
    "indicator": "def indicators(context):\n    \"\"\"指标\"\"\"\n    # 计算周期为20日的CCI指标\n    context.cci = CommodityChannelIndex(period=20)\n\n    # 设置最小CCI值\n    context.min_cci = -100\n    # 设置最大CCI值\n    context.max_cci = 100\n    # 设置账户最大使用资金\n    context.max_percent = 0.9",
    "control_risk": "def control_risk(context):\n    \"\"\"风控\"\"\"\n    pass",
    "timing": "def timing(context):\n    \"\"\"择时\"\"\"\n    # 如果未持有该标的\n    if context.position.size == 0:\n        # 如果 CCI 值向上突破最小 CCI 值\n        if context.cci[-1] < context.min_cci and context.cci[0] > context.min_cci:\n            # 计算购买数量\n            size = context.broker.cash*context.max_percent/context.data.close[0]//100*100\n            # 执行买入\n            context.buy(data=context.data, size=size,price=context.data.close[0]*1.1)\n    \n    # 如果 CCI 值向下突破最大 CCI 值\n    elif context.cci[-1] > context.max_cci and context.cci[0] < context.max_cci:\n            # 执行平仓\n            context.close(data=context.data,price=context.data.close[0]*0.9)",
    "choose_stock": "def choose_stock(context):\n    \"\"\"标的\"\"\"\n    # 设置标的为康泰生物\n    context.symbol_list = [\"300601.XSHE\"]",
    "strategy_group": "library",
    "strategy_desc": [
      "股票适用"
    ]
  },
  {
    "strategy_id": "RYKkG1ebvWDV9q8518y42gBMJxzawpP3",
    "strategy_name": "关卡6-布林带择时示例",
    "indicator": "def indicators(context):\n    \"\"\"指标\"\"\"\n    # 计算布林带指标，周期为20天\n    bb = BollingerBands(context.data.close, period=20)\n    # 计算阻力线\n    context.top = bb.top\n    # 计算支撑线\n    context.bot = bb.bot\n    # 设置账户最大使用资金\n    context.max_percent = 0.9",
    "control_risk": "def control_risk(context):\n    \"\"\"风控\"\"\"\n    pass\n",
    "timing": "def timing(context):\n    \"\"\"择时\"\"\"\n    # 如果未持有该标的\n    if context.position.size == 0:\n        # 如果价格触及下限支撑线\n        if context.data.close[0] <= context.bot[0]:\n            # 计算购买数量\n            size = context.broker.cash*context.max_percent/context.data.close[0]//100*100\n            # 执行买入\n            context.buy(data=context.data, size=size,price=context.data.close[0]*1.1)\n    \n    # 如果价格触及上限阻力线\n    elif context.data.close[0] >= context.top[0]:\n            # 执行平仓\n            context.close(data=context.data,price=context.data.close[0]*0.9)",
    "choose_stock": "def choose_stock(context):\n    \"\"\"标的\"\"\"\n    # 设置标的为中体产业\n    context.symbol_list = [\"600158.XSHG\"]",
    "strategy_group": "library",
    "strategy_desc": [
      "股票适用"
    ]
  },
  {
    "strategy_id": "jLMGWdzRy51DgPA3wAb4xENYa37Opmek",
    "strategy_name": "关卡5-CCI+SMA择时示例",
    "indicator": "def indicators(context):\n    \"\"\"指标\"\"\"\n    # 计算120日均线\n    context.sma = SMA(context.data.close, period=120)\n    # 计算周期为40日的CCI指标\n    context.cci = CommodityChannelIndex(period=40)\n    # 设置最小CCI值\n    context.min_cci = -100\n",
    "control_risk": "def control_risk(context):\n    pass\n",
    "timing": "def timing(context):\n    \"\"\"择时\"\"\"\n    # 如果未持有该标的\n    if context.position.size == 0:\n        # 如果 CCI 值向上突破最小 CCI 值\n        if context.cci[-1] < context.min_cci and context.cci[0] > context.min_cci:\n            # 计算购买数量\n            size = context.broker.cash/context.data.close[0]//100*100\n            # 执行买入\n            context.buy(data=context.data, size=size,price=context.data.close[0]*1.1)\n\n    # 如果股价向下突破 120 日均线\n    elif context.data.close[-1] > context.sma[-1] and context.data.close[0] < context.sma[0]:\n        # 执行平仓\n        context.close(data=context.data,price=context.data.close[0]*0.9)\n",
    "choose_stock": "def choose_stock(context):\n    # 设置标的为康泰生物\n    context.symbol_list = [\"300601.XSHE\"]",
    "strategy_group": "library",
    "strategy_desc": [
      "股票适用"
    ]
  },
  {
    "strategy_id": "MbKgYj19d2eNynok9ADJVLvrXGEZ6OkP",
    "strategy_name": "关卡7-抄底止损示例",
    "indicator": "def indicators(context):\n    \"\"\"指标\"\"\"\n    # 设置止损比例\n    context.p_stoploss = 0.05\n    # 设置连续下跌天数\n    context.p_downdays = 4\n    # 设置连续上涨天数\n    context.p_updays = 3\n    # 设置账户最大使用资金\n    context.max_percent = 0.9",
    "control_risk": "def control_risk(context):\n    \"\"\"风控\"\"\"\n\n    # 判断是否持仓\n    if context.position.size != 0:\n        # 计算止损价\n        stop_price = (1 - context.p_stoploss) * context.position.price\n\n        # 如果价格下跌到了止损价，则进行平仓\n        if context.data.close[0] <= stop_price :\n            context.close(data=context.data)",
    "timing": "def timing(context):\n    \"\"\"择时\"\"\"\n    # 定义价格趋势判断函数\n    def price_trend(times, trend_type):\n        # 如果当前次数小于0，或趋势类型不为up或down，则返回True\n        if times < 0 or trend_type not in ['up', 'down']:\n            return False\n        # 如果当前次数为0，则返回True\n        elif times == 0:\n            return True\n        # 如果趋势类型为down，且出现前一天小于等于当天，则返回False\n        elif trend_type == 'down' and context.data[-times] <= context.data[1-times]:\n            return False\n        # 如果趋势类型为up，且出现前一天大于等于当天，则返回False\n        elif trend_type == 'up' and context.data[-times] >= context.data[1-times]:\n            return False\n        # 其他情况则调用函数本身，并次数减一\n        else:\n            return price_trend(times-1, trend_type)\n    \n    # 判断是否持仓，如果没有持仓，则开仓\n    if context.position.size == 0:\n        # 判断是否在指定天数连续下跌\n        if price_trend(context.p_downdays, 'down'):\n            # 计算购买数量\n            size = context.broker.cash * context.max_percent / context.data.close[0] // 100 * 100\n            # 执行买入\n            context.buy(data=context.data, size=size,price=context.data.close[0]*1.1)\n    \n    # 判断是否在指定天数连续上涨\n    elif price_trend(context.p_updays, 'up'):\n            # 执行平仓\n            context.close(data=context.data,price=context.data.close[0]*0.9)",
    "choose_stock": "def choose_stock(context):\n    \"\"\"标的\"\"\"\n    # 设置标的\n    context.symbol_list = [\"300761.XSHE\"]\n",
    "strategy_group": "library",
    "strategy_desc": [
      "股票适用"
    ]
  },
  {
    "strategy_id": "Nnb52gZJDPReBw8qg0akKVLyp9Ymj34E",
    "strategy_name": "关卡7-抄底止盈止损示例",
    "indicator": "def indicators(context):\n    \"\"\"指标\"\"\"\n    # 设置连续下跌天数\n    context.p_downdays = 3\n    # 设置止损比例\n    context.p_stoploss = 0.05\n    # 设置止盈比例\n    context.p_takeprofit = 0.15\n    # 设置账户最大使用资金\n    context.max_percent = 0.9",
    "control_risk": "def control_risk(context):\n    \"\"\"风控\"\"\"\n    # 如果持仓\n    if context.position.size != 0:\n        # 计算止损价\n        stop_price = (1 - context.p_stoploss) * context.position.price\n        # 计算止盈价\n        limit_price = (1 + context.p_takeprofit) * context.position.price\n \n        # 如果当前收盘价大于止盈价或当前收盘价小于止损价\n        if context.data.close[0] > limit_price or context.data.close[0] < stop_price:\n            # 执行平仓\n            context.close(data=context.data,price=context.data.close[0]*0.9)",
    "timing": "def timing(context):\n    \"\"\"择时\"\"\"\n    # 定义连续下跌判断函数\n    def slumped(times):\n        # 如果次数为0，则返回True\n        if times == 0:\n            return True\n        # 如果出现前一天收盘价小于等于当天\n        elif context.data.close[-times] <= context.data.close[1-times] or times < 0:\n            return False\n        # 其他情况则调用函数本身，并次数减一\n        else:\n            return slumped(times-1)\n\n    # 如果未持仓，且在指定天数连续下跌\n    if context.position.size == 0 and slumped(context.p_downdays):\n        # 计算买入数量\n        size = context.broker.cash * context.max_percent / context.data.close[0] // 100 * 100\n        # 执行买入\n        context.buy(data=context.data, size=size,price=context.data.close[0]*1.1)",
    "choose_stock": "def choose_stock(context):\n    \"\"\"标的\"\"\"\n    # 设置标的为浦发银行\n    context.symbol_list = [\"600000.XSHG\"]",
    "strategy_group": "library",
    "strategy_desc": [
      "股票适用"
    ]
  },
  {
    "strategy_id": "Xw2Mn7YDaBVgPb0b9o6dWOlrmjERQLeG",
    "strategy_name": "关卡8-跟踪止损示例",
    "indicator": "def indicators(context):\n    \"\"\"指标\"\"\"\n    # 计算5日的均价，赋值给变量context.short_sma\n    context.short_sma = SMA(context.data.close, period=5)\n    # 计算30日的均价，赋值给变量context.long_sma\n    context.long_sma = SMA(context.data.close, period=30)\n\n    # 设置止损比例\n    context.stop_rate = 0.05\n    # 设置最高价为0\n    context.h_price = 0\n    # 设置账户最大使用资金\n    context.max_percent = 0.9",
    "control_risk": "def control_risk(context):\n    \"\"\"风控\"\"\"\n    # 如果当前已持仓并且未出现死叉\n    if context.position.size != 0 and not context.d_cross_sign:\n        # 获取最高价\n        context.h_price = max(\n            context.h_price, context.position.price, context.data.close[0])\n\n        # 计算止损价\n        stop_price = (1 - context.stop_rate) * context.h_price\n\n        # 如果当前股价小于止损价\n        if context.data.close[0] < stop_price:\n            # 执行平仓\n            context.close(data=context.data,price=context.data.close[0]*1.1)\n            # 重置最高价\n            context.h_price = 0",
    "timing": "def timing(context):\n    \"\"\"择时\"\"\"\n    # 设置死叉信号为False\n    context.d_cross_sign = False\n\n    # 如果未持仓\n    if context.position.size == 0:\n        # 当5日均价上升并且交叉穿过30日均价时，出现买入信号\n        if context.short_sma[-1] < context.long_sma[-1] and context.short_sma[0] > context.long_sma[0]:\n            # 计算买入数量\n            size = context.broker.cash * context.max_percent / context.data.close[0] // 100 * 100\n            # 执行买入\n            context.buy(data=context.data, size=size,price=context.data.close[0]*1.1)\n\n    # 如果5日均价下跌并且穿过30日均价时\n    elif context.short_sma[-1] > context.long_sma[-1] and context.short_sma[0] < context.long_sma[0]:\n\n        # 执行平仓\n        context.close(data=context.data,price=context.data.close[0]*0.9)\n        # 重置最高价\n        context.h_price = 0\n        # 将死叉信号设置为True\n        context.d_cross_sign = True",
    "choose_stock": "def choose_stock(context):\n    \"\"\"标的\"\"\"\n    #  设置标的为北信源\n    context.symbol_list = [\"300352.XSHE\"]",
    "strategy_group": "library",
    "strategy_desc": [
      "股票适用"
    ]
  },
  {
    "strategy_id": "nla9wGYjv71mkO0ENAbzBPM4rRNWQdqJ",
    "strategy_name": "布林带策略",
    "indicator": "def indicators(context):\n    \"\"\"指标\"\"\"\n    # 计算布林带指标，period周期修改为60\n    bb = BollingerBands(context.data.close, period = 60)\n    # 计算阻力线\n    context.top = bb.top\n    # 计算支撑线\n    context.bot = bb.bot",
    "control_risk": "def control_risk(context):\n    \"\"\"风控\"\"\"\n    pass",
    "timing": "def timing(context):\n    \"\"\"择时\"\"\"\n    # 判断是否持仓，如果不持仓，则判断是否出现买入信号\n    if not context.position:\n        # 当股价触及下限支撑线时，出现买入信号\n        if context.data.close[0] <= context.bot[0]:\n            # 买入信号出现时，发送买入指令，系统自动执行买入交易\n            context.order = context.buy(price=context.data.close[0]*1.1)\n\n    # 如果持仓，则判断是否出现卖出信号\n    else:\n        # 当股价触及上限阻力线时，出现卖出信号\n        if context.data.close[0] >= context.top[0]:\n        # 卖出信号出现时，发送卖出指令，系统自动执行卖出交易\n            context.order = context.sell(price=context.data.close[0]*1.1)",
    "choose_stock": "def choose_stock(context):\n    \"\"\"标的\"\"\"\n    context.symbol_list = [\"600000.XSHG\"]",
    "strategy_group": "library",
    "strategy_desc": [
      "股票适用",
      "基金适用",
      "期货适用"
    ]
  },
  {
    "strategy_id": "aKWZlLvVjnk4BQ8zmAPqzDNMmX9xd5p6",
    "strategy_name": "Hilbert策略",
    "indicator": "def indicators(context):\n    \"\"\"指标\"\"\"\n    # 设置均价周期\n    context.sma_period = 20\n    # 设置 Hilbert 变换的周期\n    context.hilbert_period = 30\n\n    # 计算均价\n    context.sma = SMA(context.data.close, period=context.sma_period)\n    # 计算均价的差分\n    context.sma_diff = context.sma(0) - context.sma(-1)",
    "control_risk": "def control_risk(context):\n    \"\"\"风控\"\"\"\n    pass",
    "timing": "def timing(context):\n    \"\"\"择时\"\"\"\n    import numpy as np\n    from scipy.signal import hilbert\n\n    # 获取差分序列\n    context.history_data = context.sma_diff.get(ago=0, size=context.hilbert_period)\n\n    # 判断差分序列是否为空\n    if context.history_data:\n        # 基于差分序列进行Hilbert变换\n        context.hilbert = np.imag(hilbert(list(context.history_data)))\n\n        # 判断是否持仓，如果不持仓，则判断是否出现买入信号\n        if not context.position:\n            # △(n)大于0，出现买入信号\n            if context.hilbert[-1] > 0:\n                # 发送买入指令\n                context.order = context.buy()\n            \n        # 如果持仓，则判断是否出现卖出信号\n        else:\n            # △(n)小于0，出现卖出信号\n            if context.hilbert[-1] < 0:\n                # 发送卖出指令\n                context.order = context.sell()",
    "choose_stock": "def choose_stock(context):\n    \"\"\"标的\"\"\"\n    context.symbol_list = [\"601398.XSHG\"]",
    "strategy_group": "library",
    "strategy_desc": [
      "股票适用"
    ]
  },
  {
    "strategy_id": "6RzYKdQ791Gyrj0GY8pgkaJWN2mw5vBn",
    "strategy_name": "激进型FOF",
    "indicator": "def indicators(context):\n    \"\"\"指标\"\"\"\n    # 设置需要考虑最近 N 个交易日标的表现\n    period = 5\n    # 设置筛选标的的比例\n    context.ratio = 0.2\n    # 设置用于购买股票的资金比例\n    context.max_percent = 0.9\n\n    # 初始化历史 N 个交易日净值增长率\n    context.returns = {}\n    # 初始化历史 N 个交易日的波动率\n    context.volatility = {}\n    # 初始化夏普比率\n    context.sharpe_ratio = {}\n    # 初始化历史 N 个交易日的最大回撤\n    context.max_draw_down = {}\n\n    # 设置本次标的名称列表\n    context.stock_pool = []\n\n    # 遍历所有标的\n    for data in context.datas:\n        # 计算最近 N 个交易日的总收益率\n        context.returns[data._name] = ROC(data, period=period)\n\n        # 计算最近 N 个交易日的波动率\n        growth_rate = ROC(data, period=1)\n        context.volatility[data._name] = StdDev(growth_rate, period=period)\n\n        # 计算最近 N 个交易日的夏普比率\n        context.sharpe_ratio[data._name] = SharpeRatio(data, period=period)\n\n        # 计算最近 N 个交易日的最大回撤率\n        context.max_draw_down[data._name] = MaxDrawDownN(data, period=period)",
    "control_risk": "def control_risk(context):\n    \"\"\"风控\"\"\"\n    pass",
    "timing": "def timing(context):\n    \"\"\"择时\"\"\"\n    # 如果当天月份与昨天月份不同\n    if context.current_date.month != context.previous_date.month:\n        \n        # 遍历上一次标的池数据\n        for name in context.last_stock_pool:\n            # 根据标的名称，获取标的数据\n            data = context.getdatabyname(name)\n\n            # 如果标的名称在不在本次标的池中\n            if name not in context.stock_pool:\n                # 对标的进行平仓\n                context.close(data=data)\n\n        # 遍历当前标的池\n        for name in context.stock_pool:\n            # 根据标的名称，获取标的数据\n            data = context.getdatabyname(name)\n\n            # 如果该标的当前没有持仓\n            if context.getposition(data).size == 0:\n                # 计算单个标的能使用的资金\n                stock_value = context.broker.getvalue() * context.max_percent / context.stock_num\n                # 计算购买数量\n                size = stock_value / data.close[0] // 100 * 100\n                # 执行购买\n                context.buy(data=data, size=size)",
    "choose_stock": "def choose_stock(context):\n    \"\"\"标的\"\"\"\n    # 输入基准标的\n    context.benchmark = \"000300.XSHG\"\n    # 输入组合标的\n    context.symbol_list = [\"160632.XSHE\", \"161029.XSHE\", \"161121.XSHE\", \"161725.XSHE\", \"159916.XSHE\", \"159933.XSHE\", \"160222.XSHE\", \"160421.XSHE\", \"165516.XSHE\", \"161115.XSHE\"]\n    # 获取当前的日期\n    context.current_date = context.data.datetime.date()    \n    # 获取昨天的日期\n    context.previous_date = context.data.datetime.date(-1)\n\n    # 如果当天月份与昨天月份不同\n    if context.current_date.month != context.previous_date.month:\n        # 记录上一次筛选的标的\n        context.last_stock_pool = context.stock_pool\n\n        # 设置标的得分空列表\n        score_list = []\n        # 遍历所有标的\n        for data in context.datas:\n            # 计算得分\n            score = context.returns[data._name][0] + context.sharpe_ratio[data._name][0] - context.max_draw_down[data._name][0]\n            # 添加标的代码和得分到标的得分列表\n            score_list.append([data._name, score])\n        # 按照得分降序排列\n        sorted_rate = sorted(score_list, key=lambda x: x[1], reverse=True)\n\n        # 计算筛选标的数量\n        context.stock_num = int(context.ratio * len(context.symbol_list))\n        # 重置标的池空列表\n        context.stock_pool = []\n        # 获取指定数量的标的\n        for i in sorted_rate[:context.stock_num]:\n            # 将筛选的标的添加到标的池\n            context.stock_pool.append(i[0])",
    "strategy_group": "library",
    "strategy_desc": [
      "基金适用"
    ]
  },
  {
    "strategy_id": "95YNkRq7wLlebgoMp8vG42djMKyVQ3DP",
    "strategy_name": "成长型FOF",
    "indicator": "def indicators(context):\n    \"\"\"指标\"\"\"\n    # 设置需要考虑最近 N 个交易日标的表现\n    period = 10\n    # 设置筛选标的的比例\n    context.ratio = 0.2\n    # 设置用于购买股票的资金比例\n    context.max_percent = 0.9\n\n    # 初始化历史 N 个交易日净值增长率\n    context.returns = {}\n    # 初始化历史 N 个交易日的波动率\n    context.volatility = {}\n    # 初始化夏普比率\n    context.sharpe_ratio = {}\n    # 初始化历史 N 个交易日的最大回撤\n    context.max_draw_down = {}\n\n    # 设置本次标的名称列表\n    context.stock_pool = []\n\n    # 遍历所有标的\n    for data in context.datas:\n        # 计算最近 N 个交易日的总收益率\n        context.returns[data._name] = ROC(data, period=period)\n\n        # 计算最近 N 个交易日的波动率\n        growth_rate = ROC(data, period=1)\n        context.volatility[data._name] = StdDev(growth_rate, period=period)\n\n        # 计算最近 N 个交易日的夏普比率\n        context.sharpe_ratio[data._name] = SharpeRatio(data, period=period)\n\n        # 计算最近 N 个交易日的最大回撤率\n        context.max_draw_down[data._name] = MaxDrawDownN(data, period=period)",
    "control_risk": "def control_risk(context):\n    \"\"\"风控\"\"\"\n    pass",
    "timing": "def timing(context):\n    \"\"\"择时\"\"\"\n    # 如果当天月份与昨天月份不同\n    if context.current_date.month != context.previous_date.month:\n        \n        # 遍历上一次标的池数据\n        for name in context.last_stock_pool:\n            # 根据标的名称，获取标的数据\n            data = context.getdatabyname(name)\n\n            # 如果标的名称不在本次标的池中\n            if name not in context.stock_pool:\n                # 对标的进行平仓\n                context.close(data=data)\n\n        # 遍历本次标的池\n        for name in context.stock_pool:\n            # 根据标的名称，获取标的数据\n            data = context.getdatabyname(name)\n\n            # 如果该标的当前没有持仓\n            if context.getposition(data).size == 0:\n                # 计算单个标的能使用的资金\n                stock_value = context.broker.getvalue() * context.max_percent / context.stock_num\n                # 计算购买数量\n                size = stock_value / data.close[0] // 100 * 100\n                # 执行购买\n                context.buy(data=data, size=size)",
    "choose_stock": "def choose_stock(context):\n    \"\"\"标的\"\"\"\n    # 输入基准标的\n    context.benchmark = \"000300.XSHG\"\n    # 输入组合标的\n    context.symbol_list = [\"160632.XSHE\", \"161029.XSHE\", \"161121.XSHE\", \"161725.XSHE\", \"159916.XSHE\", \"160421.XSHE\", \"165516.XSHE\", \"161115.XSHE\", \"164208.XSHE\", \"160513.XSHE\"]\n    \n    # 获取当前的日期\n    context.current_date = context.data.datetime.date()    \n    # 获取昨天的日期\n    context.previous_date = context.data.datetime.date(-1)\n\n    # 如果当天月份与昨天月份不同\n    if context.current_date.month != context.previous_date.month:\n        # 记录上一次筛选的标的\n        context.last_stock_pool = context.stock_pool\n\n        # 设置标的得分空列表\n        score_list = []\n        # 遍历所有标的\n        for data in context.datas:\n            # 计算得分\n            score = context.returns[data._name][0] - context.max_draw_down[data._name][0] + context.volatility[data._name][0] \n            # 添加标的代码和得分到标的得分列表\n            score_list.append([data._name, score])\n        # 按照得分降序排列\n        sorted_rate = sorted(score_list, key=lambda x: x[1], reverse=True)\n\n        # 计算筛选标的数量\n        context.stock_num = int(context.ratio * len(context.symbol_list))\n        # 重置标的池空列表\n        context.stock_pool = []\n        # 获取指定数量的标的\n        for i in sorted_rate[:context.stock_num]:\n            # 将筛选的标的添加到标的池\n            context.stock_pool.append(i[0])",
    "strategy_group": "library",
    "strategy_desc": [
      "基金适用"
    ]
  },
  {
    "strategy_id": "kB2dqbZ3xvNanyolQ0OlgJYR4DKeQ1r5",
    "strategy_name": "肯特纳通道策略",
    "indicator": "def indicators(context):\n    \"\"\"指标\"\"\"\n    # 设置周期\n    context.period = 10\n    # 设置倍数\n    context.multi = 2\n\n    # 计算肯特纳通道相关指标\n    kc = KeltnerChannel(context.data, period=context.period, devfactor=context.multi)\n    # 获取肯特纳通道的中轨\n    context.middle_line = kc.mid\n    # 获取肯特纳通道的上轨\n    context.upper_line = kc.top\n    # 获取肯特纳通道的下轨\n    context.lower_line = kc.bot\n\n    # 计算收盘价与上轨的交叉信号\n    context.upper_signal = CrossOver(context.data.close, context.upper_line)\n    # 计算收盘价与下轨的交叉信号\n    context.lower_signal = CrossOver(context.data.close, context.lower_line)\n",
    "control_risk": "def control_risk(context):\n    \"\"\"风控\"\"\"\n    pass",
    "timing": "def timing(context):\n    \"\"\"择时\"\"\"\n    # 获取当前仓位\n    position = context.getposition(context.data).size\n\n    # 如果当前交易日无持仓，且收盘价向上突破上轨，且中轨向上，出现做多信号\n    if position == 0 and context.upper_signal[0] > 0 and context.middle_line[0] > context.middle_line[-1]:\n        # 发送做多指令\n        context.order = context.buy()\n\n    # 如果当前交易日无持仓，且收盘价向下突破下轨，且中轨向下，出现做空信号\n    elif position == 0 and context.lower_signal[0] < 0 and context.middle_line[0] < context.middle_line[-1]:\n        # 发送做空指令\n        context.order = context.sell()\n\n    # 如果当前交易日持多仓，且收盘价向下突破中轨，出现平多信号\n    elif position > 0 and context.data.close[0] < context.middle_line[0]:\n        # 发送平多指令\n        context.order = context.close()\n\n    # 如果当前交易日持空仓，且收盘价向上突破中轨，出现平空信号\n    elif position < 0 and context.data.close[0] > context.middle_line[0]:\n        # 发送平空指令\n        context.order = context.close()",
    "choose_stock": "def choose_stock(context):\n    \"\"\"标的\"\"\"\n    context.symbol_list = [\"JD2212.XDCE\"]",
    "strategy_group": "library",
    "strategy_desc": [
      "期货适用"
    ]
  },
  {
    "strategy_id": "jJp3Onk2bLBd7QoKWom6e49gyZMxDRNY",
    "strategy_name": "网格交易策略",
    "indicator": "def indicators(context):\n    \"\"\"指标\"\"\"\n    # 设置档位总数\n    context.number = 10\n    # 设置初始仓位\n    context.open_percent = 0.5\n    # 设置挡位间距\n    context.distance = 0.05\n\n    # 设置初始订单状态\n    context.open_number = False\n",
    "control_risk": "def control_risk(context):\n    \"\"\"风控\"\"\"\n    # 判断是否已买入初始订单\n    if context.open_number:\n        # 计算今日挡位\n        index = (context.data.close[0] - context.base_price) // context.distance\n\n        # 如果今日挡位低于下边界\n        if index < context.min_index:\n            # 用下边界替代今日挡位\n            index = context.min_index\n        # 如果当前挡位高于上边界\n        elif index > context.max_index:\n            # 用上边界替代今日挡位\n            index = context.max_index\n\n        context.log(\"上一交易日挡位:{}\".format(context.last_index))\n        context.log(\"当前交易日挡位:{}\".format(index))\n\n        # 计算挡位变化数\n        change_index = index - context.last_index\n        # 如果挡位变化数大于0\n        if change_index > 0:\n            # 执行卖出\n            context.sell(data=context.data, size=change_index*context.per_size)\n        # 如果挡位变化数小于0\n        elif change_index < 0:\n            # 执行买入\n            context.buy(data=context.data, size=change_index*context.per_size)\n        \n        # 更新前一日挡位\n        context.last_index = index\n\n    context.log(\"当前持仓规模:{}\".format(context.getposition(context.data).size))\n",
    "timing": "def timing(context):\n    \"\"\"择时\"\"\"\n    # 判断是否已买入初始订单\n    if not context.open_number:\n        # 记录基准价格\n        context.base_price = context.data.close[0]\n\n        # 计算所需买入的初始订单数量\n        buy_size = context.broker.getvalue() / context.data.close[0] * context.open_percent // 100 * 100\n        # 执行买入\n        context.buy(data=context.data, size=buy_size)\n\n        # 记录前一交易日的挡位，初始挡位是0\n        context.last_index = 0\n        # 计算每变化一挡对应的订单数量\n        context.per_size = context.broker.getvalue() / context.data.close[0] / context.number // 100 * 100\n        # 计算档位的上边界\n        context.max_index = round(context.number * context.open_percent)\n        # 计算档位的下边界，由于在初始挡位的下方，所以结果是负数\n        context.min_index = context.max_index - context.number \n\n        # 更新初始订单状态\n        context.open_number = True\n        context.log('已买入初始订单')\n",
    "choose_stock": "def choose_stock(context):\n    \"\"\"标的\"\"\"\n    # 设置标的：华夏中小企业100ETF\n    context.symbol_list = [\"159902.XSHE\"]",
    "strategy_group": "library",
    "strategy_desc": [
      "股票适用",
      "基金适用",
      "期货适用"
    ]
  },
  {
    "strategy_id": "aWnv1PqONRYK4g0vn0xmEQX6LkJrZebB",
    "strategy_name": "小市值选股",
    "indicator": "def indicators(context):\n    \"\"\"指标\"\"\"\n    # 设置账户最大使用资金比例\n    context.max_percent = 0.9\n\n    # 将买入状态设置为 False，表示未执行过买入操作\n    context.have_bought = False\n    # 初始化入选标的列表\n    context.stock_pool = []\n    # 设置小市值的筛选标准\n    context.select_start = 3\n    context.select_end = 33",
    "control_risk": "def control_risk(context):\n    \"\"\"风控\"\"\"\n    pass\n",
    "timing": "def timing(context):\n    \"\"\"择时\"\"\"\n    # 如果入选标的列表不为空且尚未买入过标的\n    if context.stock_pool != [] and not context.have_bought:\n        # 计算单个标的的可用资金\n        stock_value = context.broker.getvalue() * context.max_percent / len(context.stock_pool)\n\n        # 遍历入选标的列表\n        for name in context.stock_pool:\n            # 获取入选标的对象\n            data = context.getdatabyname(name)\n\n            # 计算标的的买入数量\n            size = stock_value / data.close[0] // 100 * 100\n            # 执行买入操作\n            context.buy(data=data, size=size, price=data.close[0]*1.1)\n\n        # 将买入状态设置为 True，表示已执行过买入操作\n        context.have_bought = True",
    "choose_stock": "def choose_stock(context):\n    \"\"\"标的\"\"\"\n    # 设置基准标的\n    context.benchmark = \"000852.XSHG\"\n    # 设置指数\n    context.symbol_list = [\"000852.XSHG\"]\n    # 打开解析成分股参数\n    context.parse_index = True\n\n    # 如果入选标的列表为空\n    if context.stock_pool == []:\n        # 获取当前日期\n        current_date = context.data.datetime.date()\n\n        # 获取市值数据\n        valuation = context.get_fundamentals(date=current_date, type=\"valuation\")\n        # 提取标的代码和市值数据\n        valuation = valuation[[\"symbol_exchange\", \"market_cap\"]]\n        # 将数据按照市值从小到大进行排序\n        sorted_valuation = valuation.sort_values(by=\"market_cap\")\n        # 取出标的名称\n        name_list = sorted_valuation[\"symbol_exchange\"].to_list()\n\n        # 提取小市值标的\n        context.stock_pool = name_list[context.select_start:context.select_end]\n        # 打印筛选出来的标的\n        context.log(\"筛选出来的标的有:{}\".format(context.stock_pool))",
    "strategy_group": "library",
    "strategy_desc": [
      "股票适用"
    ]
  },
  {
    "strategy_id": "bQjv2nDEkmrg7LA6q0KeaJNxRqlBYWV4",
    "strategy_name": "市值+市净率 选股",
    "indicator": "def indicators(context):\n    \"\"\"指标\"\"\"\n    # 设置账户最大使用资金\n    context.max_percent = 0.9\n\n    # 将买入状态设置为 False，表示未执行过买入操作\n    context.have_bought = False\n    # 初始化入选标的列表\n    context.stock_pool = []",
    "control_risk": "def control_risk(context):\n    \"\"\"风控\"\"\"\n    pass\n",
    "timing": "def timing(context):\n    \"\"\"择时\"\"\"\n    # 如果未买入并且入选标的列表不为空\n    if not context.have_bought and context.stock_pool != []:\n        # 计算每个标的所能用的资金\n        stock_value = context.broker.getvalue() * context.max_percent / len(context.stock_pool)\n\n        # 遍历入选标的列表\n        for name in context.stock_pool:\n            # 获取入选的标的对象\n            data = context.getdatabyname(name)\n\n            # 计算买入数量\n            size = stock_value / data.close[0] // 100 * 100\n            # 执行买入操作\n            context.buy(data=data, size=size, price=data.close[0]*1.1)\n\n        # 将买入状态设置为 True，表示已执行过买入操作\n        context.have_bought = True",
    "choose_stock": "def choose_stock(context):\n    \"\"\"标的\"\"\"\n    # 设置基准标的\n    context.benchmark = \"000300.XSHG\"\n    # 设置标的\n    context.symbol_list = [\"000300.XSHG\"]\n    # 打开解析成分股参数\n    context.parse_index = True\n    \n    # 如果入选标的列表为空\n    if context.stock_pool == []:\n        # 获取当前日期\n        current_date = context.data.datetime.date()\n\n        # 获取市值数据\n        valuation_data = context.get_fundamentals(date=current_date, type=\"valuation\")\n        # 取出标的代码、市净率、市销率数据\n        valuation_data = valuation_data[['symbol_exchange', 'pb_ratio', 'ps_ratio']]\n\n        # 获取分数数据，从1开始\n        rank_list = []\n        for i in range(1, len(valuation_data)+1):\n            rank_list.append(i)\n\n        # 根据市净率按大到小进行排序\n        valuation_data = valuation_data.sort_values(by='pb_ratio', ascending=False)\n        # 将市净率得分写入到市值数据中\n        valuation_data['pb_rank'] = rank_list\n\n        # 根据市销率按大到小进行排序\n        valuation_data = valuation_data.sort_values(by='ps_ratio', ascending=False)\n        # 将市销率得分写入到市值数据中\n        valuation_data['ps_rank'] = rank_list\n\n        # 计算总分\n        valuation_data['score'] = valuation_data['pb_rank'] + valuation_data['ps_rank']\n\n        # 根据分数从大到小进行排序\n        valuation_data = valuation_data.sort_values(by='score', ascending=False)\n\n        # 获取前 10 个股票名称，并添加到入选标的列表中\n        context.stock_pool = valuation_data['symbol_exchange'].to_list()[:10]\n\n        context.log('\\n筛选出来的标的有{}'.format(context.stock_pool))",
    "strategy_group": "library",
    "strategy_desc": [
      "股票适用"
    ]
  },
  {
    "strategy_id": "PwQ17ky2JjEzYW0Pv8gnMl3aNGVKpd4L",
    "strategy_name": "市值+净利润同比增长率 选股",
    "indicator": "def indicators(context):\n    \"\"\"指标\"\"\"\n    # 设置账户最大使用资金\n    context.max_percent = 0.9\n\n    # 将买入状态设置为 False，表示未执行过买入操作\n    context.have_bought = False\n    # 初始化入选标的列表\n    context.stock_pool = []",
    "control_risk": "def control_risk(context):\n    \"\"\"风控\"\"\"\n    pass\n",
    "timing": "def timing(context):\n    \"\"\"择时\"\"\"\n    # 如果未买入并且入选标的列表不为空\n    if not context.have_bought and context.stock_pool != []:\n        # 计算每个标的所能用的资金\n        stock_value = context.broker.getvalue() * context.max_percent / len(context.stock_pool)\n\n        # 遍历入选标的列表\n        for name in context.stock_pool:\n            # 获取入选的标的对象\n            data = context.getdatabyname(name)\n\n            # 计算买入数量\n            size = stock_value / data.close[0] // 100 * 100\n            # 执行买入操作\n            context.buy(data=data, size=size, price=data.close[0]*1.1)\n\n        # 将买入状态设置为 True，表示已执行过买入操作\n        context.have_bought = True",
    "choose_stock": "def choose_stock(context):\n    \"\"\"标的\"\"\"\n    # 设置基准标的\n    context.benchmark = \"000300.XSHG\"\n    # 设置标的\n    context.symbol_list = [\"000300.XSHG\"]\n    # 打开解析成分股参数\n    context.parse_index = True\n\n    # 如果入选标的列表为空\n    if context.stock_pool == []: \n        # 获取当前日期\n        current_date = context.data.datetime.date()\n\n        # 获取市值数据\n        valuation_data = context.get_fundamentals(date=current_date, type=\"valuation\")\n        # 取出标的代码、市净率数据\n        valuation_data = valuation_data[['symbol_exchange', 'pb_ratio']]\n\n        # 获取分数数据，从1开始\n        rank_list = []\n        for i in range(1, len(valuation_data)+1):\n            rank_list.append(i)\n\n        # 根据市净率按大到小进行排序\n        valuation_data = valuation_data.sort_values(by='pb_ratio', ascending=False)\n        # 将市净率得分写入到市值数据中\n        valuation_data['pb_rank'] = rank_list\n\n        # 获取财务指标数据\n        indicator_data = context.get_fundamentals(date=current_date, type=\"indicator\")\n        # 取出标的代码、净利润同比增长率数据\n        indicator_data = indicator_data[['symbol_exchange', 'inc_net_profit_year_on_year']]\n\n        # 按净利润增长率小到大进行排序\n        indicator_data = indicator_data.sort_values(by='inc_net_profit_year_on_year')\n        # 将净利润增长率得分写入到财务指标数据中\n        indicator_data['inc_net_profit_rank'] = rank_list\n\n        # 合并市值数据和财务指标数据\n        total_data = valuation_data.merge(indicator_data, on='symbol_exchange')\n\n        # 计算分数，并写入到总数据中\n        total_data['score'] = total_data['pb_rank'] + total_data['inc_net_profit_rank']\n\n        # 根据分数对总数据按大到小进行排序\n        total_data = total_data.sort_values(by='score', ascending=False)\n\n        # 获取前10个股票名称\n        context.stock_pool = total_data['symbol_exchange'].to_list()[:10]\n\n        context.log('\\n筛选出来的标的有{}'.format(context.stock_pool))",
    "strategy_group": "library",
    "strategy_desc": [
      "股票适用"
    ]
  },
  {
    "strategy_id": "lONjwgvzb5BWryoV189eLXJd1VqDZKQ3",
    "strategy_name": "框架代码（RSI指标）",
    "indicator": "def indicators(context):\n    \"\"\"指标\"\"\"\n    # 设置每次买卖的数量\n    context.trade_size = 100\n    # 设置止盈比例\n    context.take_profit = 0.15\n    # 设置止损比例\n    context.stop_loss = 0.08\n\n    # 以上为每个策略都会用到的常用参数设置部分\n    # 接下来针对具体的策略，可以计算一些针对性的参数\n    # ------------------------------------------------------------------\n\n    # 初始化RSI指标上限\n    context.top = 70\n    # 初始化RSI指标下限\n    context.bot = 25\n    # 设置信号字典\n    context.rsi_dict = {}\n    # 设置RSI的计算周期\n    rsi_period = 6\n    # 遍历所有标的\n    for data in context.datas:\n        # 计算周期为6的RSI指标\n        rsi = RSI(data.close, period=rsi_period, safediv=True)\n        # 记录标的对应的RSI指标 \n        context.rsi_dict[data] = {'rsi': rsi}",
    "control_risk": "def control_risk(context):\n    \"\"\"风控\"\"\"\n    # 遍历所有标的\n    for data in context.datas:\n        # 获取标的当前持仓数量\n        hold_size = context.getposition(data).size\n        # 如果有持仓\n        if hold_size > 0:\n            # 获取持仓均价\n            hold_price = context.getposition(data).price\n            # 计算止损价\n            stop_price = (1 - context.stop_loss) * hold_price\n            # 计算止盈价\n            profit_price = (1 + context.take_profit) * hold_price\n\n            # 如果当前价格达到了止盈或止损价\n            if data.close[0] < stop_price or data.close[0] > profit_price:\n                # 执行平仓\n                context.close(data=data, price=data.close[0]*0.9)\n                context.log(\"执行了止盈或止损\")",
    "timing": "def timing(context):\n    \"\"\"择时\"\"\"\n    # 设置交易字典\n    trade_dict = {'需买入的标的对象': [], '需买入标的的代码': [], '需卖出的标的对象': [], '需卖出的标的代码': []}\n    # 遍历所有标的\n    for data in context.datas:\n        # 获取RSI\n        rsi = context.rsi_dict[data]['rsi']\n\n        # 当RSI值低于其下限时\n        if rsi[0] < context.bot:\n            # 记录需要买入的标的对象\n            trade_dict['需买入的标的对象'].append(data)\n            # 记录需要买入标的对象的代码\n            trade_dict['需买入标的的代码'].append(data._name)\n        # 当RSI值高于其上限时\n        elif rsi[0] > context.top:\n            # 记录需要卖出的标的对象\n            trade_dict['需卖出的标的对象'].append(data)\n            # 记录需要卖出标的对象的代码\n            trade_dict['需卖出的标的代码'].append(data._name)\n\n    # 如果需买入标的的代码列表或需卖出的标的代码不为空：\n    if trade_dict['需买入标的的代码'] or trade_dict['需卖出的标的代码']:\n        # 打印列表中的信息\n        context.log('\\n 需卖出的标的为：{} \\n 需买入的标的为：{}'.format(trade_dict['需卖出的标的代码'], trade_dict['需买入标的的代码']))\n\n    # 择时到此，将输出所有标的需要操作的状态，新的策略只需要在这之前根据策略内容输出对应的状态即可\n    # 接下来执行交易\n\n    # 遍历需要卖出的标的\n    for sell_data in trade_dict['需卖出的标的对象']:\n        # 获取持仓数量\n        hold_size = context.getposition(sell_data).size\n        # 如果持仓数量大于0\n        if hold_size > 0:\n            # 执行平仓，订单类型为市价单\n            context.close(data=sell_data, price=sell_data.close[0]*0.9)\n            # # 执行平仓，订单类型为限价单\n            # context.sell(data=sell_data, size=hold_size, price=sell_data.close[0], exectype=Order.Limit)\n\n    # 遍历需要买入的标的\n    for buy_data in trade_dict['需买入的标的对象']:\n        # 执行买入，订单类型为市价单\n        context.buy(data=buy_data, size=context.trade_size, price=buy_data.close[0]*1.1)\n        # # 执行买入，订单类型为限价单\n        # context.buy(data=buy_data, size=context.trade_size, price=buy_data.close[0], exectype=Order.Limit)\n",
    "choose_stock": "def choose_stock(context):\n    \"\"\"选股\"\"\"\n    # 设置基准标的\n    context.benchmark = \"000016.XSHG\"\n    # 设置标的列表\n    context.symbol_list = [\"000016.XSHG\"]\n    context.parse_index = True",
    "strategy_group": "library",
    "strategy_desc": [
      "股票适用",
      "基金适用",
      "期货适用"
    ]
  },
  {
    "strategy_id": "rkxdaDLRbPmwqyAwP8lz4e6MXpEWN7YO",
    "strategy_name": "框架代码+单日资金和总资金风控",
    "strategy_desc": [
      "股票适用",
      "基金适用",
      "期货适用"
    ],
    "strategy_desc_url": "",
    "strategy_group": "library",
    "indicator": null,
    "control_risk": null,
    "timing": null,
    "choose_stock": null
  },
  {
    "strategy_id": "QYgmqJZNkRvDzb0Yy0lxWO9PpXGKaM2L",
    "strategy_name": "RSI-标的池-分钟回测V6",
    "indicator": "def indicators(context):\n    \"\"\"指标\"\"\"\n    # 设置每次买卖的数量\n    context.trade_size = 100\n    # 设置止盈比例\n    context.take_profit = 0.15\n    # 设置止损比例\n    context.stop_loss = 0.08\n\n    # 以上为每个策略都会用到的常用参数设置部分\n    # 接下来针对具体的策略，可以计算一些针对性的参数\n    # ------------------------------------------------------------------\n\n    # 初始化RSI指标上限\n    context.top = 75\n    # 初始化RSI指标下限\n    context.bot = 25\n    # 设置指标字典\n    context.rsi_dict = {}\n    # 设置RSI的计算周期\n    rsi_period = 6\n    # 遍历所有标的\n    for data in context.datas:\n        # 计算周期为6的RSI指标\n        rsi = RSI(data.close, period=rsi_period, safediv=True)\n        # 记录标的对应的RSI指标 \n        context.rsi_dict[data] = {'rsi': rsi}\n\n    # ------------------资金风控\n    # 设置最大使用资金比例\n    context.max_percent = 0.8\n    # 设置每天最大使用资金比例\n    context.day_max_percent = 0.3\n\n    # ------------------取消订单\n    # 设置订单取消间隔时间为1800秒\n    context.cancel_interval = 1800",
    "control_risk": "def control_risk(context):\n    \"\"\"风控\"\"\"\n    # 遍历所有标的\n    for data in context.datas:\n        # # 获取标的当前持仓数量\n        # hold_size = context.getposition(data).size\n        # 获取当天可交易的数量\n        salable_size = context.getposition(data).available\n        # 如果有持仓\n        if salable_size > 0:\n            # 获取持仓均价\n            hold_price = context.getposition(data).price\n            # 计算止损价\n            stop_price = (1 - context.stop_loss) * hold_price\n            # 计算止盈价\n            profit_price = (1 + context.take_profit) * hold_price\n            \n            # 如果当前价格达到了止盈或止损价\n            if data.close[0] < stop_price or data.close[0] > profit_price:\n                # 执行平仓\n                context.sell(data=data, size=salable_size,price=data.close[0])\n                context.log(\"执行了止盈或止损\")",
    "timing": "def timing(context):\n    \"\"\"择时\"\"\"\n    # 设置信号字典\n    trade_dict = {'需买入的标的对象': [], '需买入标的的代码': [], '需卖出的标的对象': [], '需卖出的标的代码': []}\n    # 遍历所有标的\n    for data in context.datas:\n        # 获取RSI\n        rsi = context.rsi_dict[data]['rsi']\n\n        # 当RSI值低于其下限时\n        if rsi[0] < context.bot:\n            # 记录需要买入的标的对象\n            trade_dict['需买入的标的对象'].append(data)\n            # 记录需要买入标的对象的代码\n            trade_dict['需买入标的的代码'].append(data._name)\n        # 当RSI值高于其上限时\n        elif rsi[0] > context.top:\n            # 记录需要卖出的标的对象\n            trade_dict['需卖出的标的对象'].append(data)\n            # 记录需要卖出标的对象的代码\n            trade_dict['需卖出的标的代码'].append(data._name)\n\n    # 如果需买入标的的代码列表或需卖出的标的代码不为空：\n    if trade_dict['需买入标的的代码'] or trade_dict['需卖出的标的代码']:\n        # 打印列表中的信息\n        context.log('\\n 需卖出的标的为：{} \\n 需买入的标的为：{}'.format(trade_dict['需卖出的标的代码'], trade_dict['需买入标的的代码']))\n\n    # 择时到此，将输出所有标的需要操作的状态，新的策略只需要在这之前根据策略内容输出对应的状态即可\n\n    # -------------------取消订单\n    # 设置取消订单金额为0\n    canceled_value = 0\n    # 获取当前日期时间\n    current_datetime = context.datetime.datetime()\n\n    # 获取所有已委托的订单\n    submitted_orders = context.get_orders(status='submitted')\n    # 遍历所有已委托的订单\n    for order in submitted_orders:\n        # 获取委托创建时间\n        created_time = order.created_at\n        # 获取当前距离委托时，间隔的秒数\n        interval_now = (current_datetime - created_time).seconds\n\n        # 如果该委托单为买入并且当前距离委托的间隔时间达到订单取消间隔时间\n        if order.ordtype == 0 and interval_now >= context.cancel_interval:\n            # 取消订单\n            context.cancel(order)\n            # 计算订单金额\n            order_value = order.created.price * order.created.size\n            # 将订单金额累加到取消清单金额中\n            canceled_value += order_value\n\n    # -------------------资金风控--计算今天花费总资金(不包含现在)\n    # 设置记录当天买入资金为0\n    day_buy_value = 0\n    # 遍历所有已委托的订单\n    for order in submitted_orders:\n        # 如果该委托单为买入\n        if order.ordtype == 0:\n            # 计算订单金额\n            order_value = order.created.price * order.created.size\n            # 将订单金额累加到当天买入资金变量中\n            day_buy_value += order_value\n\n    # 当天买入资金需要减去取消的订单金额\n    day_buy_value -= canceled_value\n\n    # 获取所有已成交的订单\n    completed_orders = context.get_orders(status='completed')\n    # 遍历所有已成交的订单\n    for order in completed_orders:\n        # 如果该成交单为买入\n        if order.ordtype == 0:\n            # 获取订单金额，并累加到当天买入资金变量中\n            day_buy_value += order.executed.value\n\n    # 接下来执行交易\n\n    # 遍历需要卖出的标的\n    for sell_data in trade_dict['需卖出的标的对象']:\n        # 获取当天可交易的数量\n        salable_size = context.getposition(sell_data).available\n\n        # 如果可交易数量大于0\n        if salable_size > 0:\n            # 卖出所有持仓数量，订单类型为市价单\n            context.sell(data=sell_data, size=salable_size,price=sell_data.close[0])\n            # # 执行卖出，订单类型为限价单\n            # context.sell(data=sell_data, size=salable_size, price=sell_data.close[0], exectype=Order.Limit)\n\n    # 遍历需要买入的标的\n    for buy_data in trade_dict['需买入的标的对象']:\n\n        # -------------------资金风控--计算今天花费总资金(包含现在)\n\n        # 计算当前买入所需的资金\n        buy_value = buy_data.close[0] * context.trade_size\n        # 计算当天用于买入的资金比例\n        day_buy_percent = (day_buy_value + buy_value) / context.broker.getvalue()\n        # 计算剩余的现金比例\n        remaining_cash_percent = (context.broker.cash - buy_value) / context.broker.getvalue()\n\n        # 如果当天用于买入的资金比例小于每天最大买入资金比例，并且投入的总资金不超过最大资金使用比例\n        if day_buy_percent < context.day_max_percent and remaining_cash_percent > (1 - context.max_percent):\n            # # 执行买入，订单类型为市价单\n            # order = context.buy(data=buy_data, size=context.trade_size)\n            # 执行买入，订单类型为限价单\n            order = context.buy(data=buy_data, size=context.trade_size, price=buy_data.close[0], exectype=Order.Limit)\n\n            # 如果order不为None\n            if order:\n                # 将本次买入金额累加到当天买入资金变量中\n                day_buy_value += buy_value",
    "choose_stock": "def choose_stock(context):\n    \"\"\"选股\"\"\"\n    # 设置基准标的\n    context.benchmark = \"510360.XSHG\"\n    # 设置标的列表\n    context.symbol_list = [\"601398.XSHG\", \"000725.XSHE\", \"002717.XSHE\", \"600028.XSHG\", \"510360.XSHG\"]",
    "strategy_group": "library",
    "strategy_desc": [
      "股票适用"
    ]
  }
]